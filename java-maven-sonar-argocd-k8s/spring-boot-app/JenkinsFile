pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'  
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'  
        }
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm  // This checks out the repository code
                echo 'Checkout complete!'  // Simple message passed
            }
        }
        stage('Build And Test') {
            steps {
                script {
                    echo 'Navigating to spring-boot-app directory and building the project.'
                    sh 'cd java-maven-sonar-argocd-k8s/spring-bot-app && mvn clean package'  // Build command
                }
            }
        }
	stage('Static Code Analysis') {
	    environment {
                 SONARQUBE_URL = 'http:/54.82.69.26:9000'  
                }
            steps {
                script {
                    echo 'Running SonarQube static code analysis.'

                    // Use withCredentials to securely access SonarQube credentials
                    withCredentials([string(credentialsId: 'sonar-creds', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh """
                        cd java-maven-sonar-argocd-k8s/spring-bot-app && mvn sonar:sonar \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONAR_AUTH_TOKEN}
                        """
                    }
                }
            }
        }
	stage('Build and Push Docker Image') {
           environment {
            DOCKER_IMAGE = "Gurkirpa/ultimate-cicd:${BUILD_NUMBER}"
         // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-k8s/spring-bot-app/Dockerfile"
            REGISTRY_CREDENTIALS = credentials('docker-creds')
            }
            steps {
                script {
                  sh 'cd java-maven-sonar-argocd-k8s/spring-bot-app && docker build -t ${DOCKER_IMAGE} .'
                     def dockerImage = docker.image("${DOCKER_IMAGE}")
                     docker.withRegistry('https://index.docker.io/v1/', "docker-creds") {
                     dockerImage.push()
                   }
                }
            }
        }
	stage('Update Deployment File') {
           environment {
              GIT_REPO_NAME = "jenkins"
              GIT_USER_NAME = "Gurkirpa"
            }
            steps {
                 withCredentials([string(credentialsId: 'git-creds', variable: 'GITHUB_TOKEN')]) {
                  sh '''
                    git config user.email "jasneet3637@gmail.com"
                    git config user.name "Amanjot"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-k8s/spring-bot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-k8s/spring-bot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
                }
            }
        }
    }
}
